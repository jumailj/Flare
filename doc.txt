requirements:
- g++ compiler
- gmake
- python-3

git clone --recursive "url"

#create a venv for python in script folder
 - currently vulkan not adding to system path.

```
 cd scripts
 python3 -m venv flare
 source flare/bin/activate
 python3 Setup.py
 deactivate
 cd ..
 gmake
```


# entity component system example:
#if ENTT_EXAMPLE_CODE
		entt::entity entity = m_Registry.create();
		m_Registry.emplace<TransformComponent>(entity, glm::mat4(1.0f));

		m_Registry.on_construct<TransformComponent>().connect<&OnTransformConstruct>();


		if (m_Registry.has<TransformComponent>(entity))
			TransformComponent& transform = m_Registry.get<TransformComponent>(entity);


		auto view = m_Registry.view<TransformComponent>();
		for (auto entity : view)
		{
			TransformComponent& transform = view.get<TransformComponent>(entity);
		}

		auto group = m_Registry.group<TransformComponent>(entt::get<MeshComponent>);
		for (auto entity : group)
		{
			auto& [transform, mesh] = group.get<TransformComponent, MeshComponent>(entity);
		}
#endif


//
sudo apt install libx11-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
sudo apt install libgtk-3-dev

// 
pip install setuptools


// build mono--

Totally got you. You're trying to:

> ‚úÖ Build Mono from source on Linux  
> ‚úÖ Get both **Debug** and **Release** static libraries  
> ‚úÖ End up with something like `libmono-static.a` that you can link in your C++ engine

Here‚Äôs **everything** you need ‚Äî step by step, with a **clean build system**.

---

# ‚úÖ STEP 1: Clone Mono

```bash
git clone --recursive https://github.com/mono/mono
cd mono
```

Use `--recursive` so all submodules are cloned too.

---

# ‚úÖ STEP 2: Setup Output Folders

Create two folders for output:

```bash
mkdir -p $HOME/mono-build/debug
mkdir -p $HOME/mono-build/release
```

---

# ‚úÖ STEP 3: Configure Debug Build

```bash
./autogen.sh --prefix=$HOME/mono-build/debug \
             --disable-nls \
             --enable-static \
             --disable-shared \
             CFLAGS='-g -O0' CXXFLAGS='-g -O0'
```

Then compile it:

```bash
make clean
make -j$(nproc)
make install
```

This gives you:

- `$HOME/mono-build/debug/lib/libmono-2.0.a`
- Debug symbols included
- Headers: `$HOME/mono-build/debug/include/mono-2.0/`

---

# ‚úÖ STEP 4: Configure Release Build

```bash
./autogen.sh --prefix=$HOME/mono-build/release \
             --disable-nls \
             --enable-static \
             --disable-shared \
             CFLAGS='-O2' CXXFLAGS='-O2'
```

Then compile it:

```bash
make clean
make -j$(nproc)
make install
```

Now you get:

- `$HOME/mono-build/release/lib/libmono-2.0.a`
- Optimized for performance
- Headers: `$HOME/mono-build/release/include/mono-2.0/`

---

# ‚úÖ STEP 5: Verify Output Files

You should have:

```bash
# Debug build
$HOME/mono-build/debug/lib/libmono-2.0.a
$HOME/mono-build/debug/include/mono-2.0/

# Release build
$HOME/mono-build/release/lib/libmono-2.0.a
$HOME/mono-build/release/include/mono-2.0/
```

---

# ‚úÖ STEP 6: Linking in Your Game Engine

### üîπ In Debug Mode:
```bash
g++ myengine.cpp \
    -I$HOME/mono-build/debug/include/mono-2.0 \
    -L$HOME/mono-build/debug/lib \
    -lmono-2.0 -ldl -pthread -lm
```

### üîπ In Release Mode:
```bash
g++ myengine.cpp \
    -I$HOME/mono-build/release/include/mono-2.0 \
    -L$HOME/mono-build/release/lib \
    -lmono-2.0 -ldl -pthread -lm
```

---

# ‚úÖ BONUS: Create a Shell Script to Automate All

Would you like a `.sh` script that builds both debug and release in one go and organizes the output? I can write it for you!


-----------------------------------------------------------



Great follow-up ‚Äî and **yes**, let's get into the real deal now: **can this setup actually run your embedded C# code in your C++ engine?**

‚úÖ Short Answer:  
Yes, with the static Mono runtime (`libmono-native.a`, etc.) **correctly linked**, and with the **Mono embedding API**, you can compile and run C# scripts in your C++ engine.

---

## ‚úÖ Here's What You Need for Embedding C# in C++ (with Static Mono)

### 1. **Mono runtime static libraries**

You already built these:

- `libmono-native.a`
- `libmono-support.a`
- `libmonoposixhelper.a`
- *(and maybe profiling libraries like `libmono-profiler-log.a`)*

These are the **core native runtime components** ‚Äî equivalent to what Mono dynamically loads from `mono-2.0.dll` on Windows.

---

### 2. **Mono header files**

When embedding Mono in C++, you need:

```
mono/metadata/
mono/jit/
mono/utils/
```

These come from:

```
$HOME/mono-build/debug/include/mono-2.0/
```

---

### 3. **Your C++ engine must use the Mono Embedding API**

You need to call Mono's functions like:

```cpp
mono_jit_init_version()
mono_domain_assembly_open()
mono_class_from_name()
mono_method_desc_new()
mono_runtime_invoke()
// etc.
```

You include Mono like this:

```cpp
#include <mono/jit/jit.h>
#include <mono/metadata/assembly.h>
#include <mono/metadata/debug-helpers.h>
```

And link with your static libs (as explained before).

---

### 4. **You must compile your C# script into a .NET assembly (.dll or .exe)**

You do **not** need the full `System.dll` source code compiled, just use the **already-built class libraries**.

For example, if you have a script like:

```csharp
public class MyGameScript {
    public static void Update() {
        Console.WriteLine("Update called!");
    }
}
```

Compile it like:

```bash
mcs -target:library -out:MyScript.dll MyGameScript.cs
```

Then your C++ engine can **load that DLL** and **invoke methods** from it.

---

### 5. ‚úÖ Static Mono will **compile and run C# code** like dynamic Mono does ‚Äî as long as:

- You **load precompiled assemblies (.dll)** at runtime
- You **link the correct static libraries**
- You **initialize the Mono runtime properly** in your C++ code

---

## üîß Final Example

If you're using C++ to call a method from `MyScript.dll`, you'd do:

```cpp
MonoDomain* domain = mono_jit_init_version("MyApp", "v4.0.30319");
MonoAssembly* assembly = mono_domain_assembly_open(domain, "MyScript.dll");
MonoImage* image = mono_assembly_get_image(assembly);

MonoClass* klass = mono_class_from_name(image, "MyGameScript", ""); // assuming global namespace
MonoMethod* method = mono_class_get_method_from_name(klass, "Update", 0);
mono_runtime_invoke(method, nullptr, nullptr, nullptr);
```

And if you've linked all the `.a` files properly, this will run **completely statically** ‚Äî no dynamic Mono install needed.

---

### ‚úÖ TL;DR:

| Step                         | Done? |
|------------------------------|-------|
| Built Mono as static libs    | ‚úÖ Yes |
| Linked C++ to those libs     | ‚úÖ Yes |
| Using Mono embedding API     | ‚õîÔ∏è *(you need to add this if not yet)* |
| Compiling C# to `.dll`       | ‚úÖ Use `mcs` or `csc` |
| Calling C# from C++          | ‚úÖ Yes, with Mono APIs |

---

Want me to give you a **starter C++ + C# example** with build steps for static Mono?



just install mono.. that's all .